# Function to turn off the Windows Firewall
function Turn-OffFirewall {
    try {
        Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
        Write-Host "Firewall turned off." -ForegroundColor Green
    } catch {
        Write-Host "Error turning off firewall: $_" -ForegroundColor Red
    }
    Read-Host "Press Enter to return to the main menu..."
}

# Function to enable Remote Desktop
function Enable-RemoteDesktop {
    try {
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name 'fDenyTSConnections' -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Write-Host "Remote Desktop enabled." -ForegroundColor Green
    } catch {
        Write-Host "Error enabling Remote Desktop: $_" -ForegroundColor Red
    }
    Read-Host "Press Enter to return to the main menu..."
}

# Function to update Windows
function Update-Windows {
    try {
        # Install PSWindowsUpdate module if not installed
        if (-not (Get-Module -ListAvailable -Name PSWindowsUpdate)) {
            Write-Host "PSWindowsUpdate module is not installed. Installing now..."
            Install-Module -Name PSWindowsUpdate -Scope CurrentUser -Force -AllowClobber -ErrorAction Stop
        }

        Import-Module PSWindowsUpdate

        # Check for Windows updates
        Write-Host "Checking for Windows updates..."
        Get-WindowsUpdate -AcceptAll -AutoReboot
        Write-Host "Windows update completed." -ForegroundColor Green
    } catch {
        Write-Host "Error updating Windows: $_" -ForegroundColor Red
    }
    Read-Host "Press Enter to return to the main menu..."
}

# Function to change the computer name
function Change-ComputerName {
    try {
        $newName = Read-Host "Enter the new computer name"
        Rename-Computer -NewName $newName
        Write-Host "Computer name changed to $newName." -ForegroundColor Green
        $reboot = Read-Host "Do you want to reboot the computer now? (Y/N)"
        if ($reboot -eq 'Y') {
            Restart-Computer -Force
        } else {
            Write-Host "You need to manually restart the computer for the changes to take effect." -ForegroundColor Yellow
        }
    } catch {
        Write-Host "Error changing computer name: $_" -ForegroundColor Red
    }
    Read-Host "Press Enter to return to the main menu..."
}

# Function to manage network adapters
function Manage-NetworkAdapters {
    try {
        # List all network adapters
        $adapters = Get-NetAdapter
        if ($adapters.Count -eq 0) {
            Write-Host "No network adapters found." -ForegroundColor Red
            return
        }

        Write-Host "Available network adapters:" -ForegroundColor Cyan
        $adapters | Format-Table -Property Name, Status, LinkSpeed

        # Select an adapter
        $adapterName = Read-Host "Enter the name of the adapter to configure"
        $selectedAdapter = $adapters | Where-Object { $_.Name -eq $adapterName }

        if (-not $selectedAdapter) {
            Write-Host "Adapter not found." -ForegroundColor Red
            return
        }

        Write-Host "Selected adapter: $($selectedAdapter.Name)" -ForegroundColor Green

        # Configure IP settings
        $ipConfig = Read-Host "Set IP configuration - DHCP or Static? (Enter 'DHCP' or 'Static')"
        if ($ipConfig -eq 'DHCP') {
            # Disable the adapter
            Disable-NetAdapter -Name $selectedAdapter.Name -Confirm:$false
            Start-Sleep -Seconds 5  # Wait for 5 seconds to ensure the adapter is disabled
            
            # Set adapter to DHCP
            Set-NetIPInterface -InterfaceAlias $selectedAdapter.Name -Dhcp Enabled
            # Remove existing static IP settings
            Get-NetIPAddress -InterfaceAlias $selectedAdapter.Name | Remove-NetIPAddress -Confirm:$false -ErrorAction SilentlyContinue
            Write-Host "Adapter set to DHCP." -ForegroundColor Green
        } elseif ($ipConfig -eq 'Static') {
            $ipAddress = Read-Host "Enter the static IP address"
            $prefixLength = Read-Host "Enter the subnet prefix length (e.g., 24)"
            $gateway = Read-Host "Enter the default gateway"
            $dnsServers = Read-Host "Enter DNS servers (comma-separated)"

            # Disable the adapter
            Disable-NetAdapter -Name $selectedAdapter.Name -Confirm:$false
            Start-Sleep -Seconds 5  # Wait for 5 seconds to ensure the adapter is disabled

            # Remove existing IP configurations
            Get-NetIPAddress -InterfaceAlias $selectedAdapter.Name | Remove-NetIPAddress -Confirm:$false -ErrorAction SilentlyContinue

            # Add static IP configuration
            New-NetIPAddress -InterfaceAlias $selectedAdapter.Name -IPAddress $ipAddress -PrefixLength $prefixLength -DefaultGateway $gateway
            Set-DnsClientServerAddress -InterfaceAlias $selectedAdapter.Name -ServerAddresses $dnsServers.Split(',')
            Write-Host "Adapter set to Static IP with address $ipAddress." -ForegroundColor Green
        } else {
            Write-Host "Invalid option. Please enter 'DHCP' or 'Static'." -ForegroundColor Red
            return
        }

        # Re-enable the adapter
        Enable-NetAdapter -Name $selectedAdapter.Name -Confirm:$false
        Write-Host "Adapter re-enabled." -ForegroundColor Green
    } catch {
        Write-Host "Error managing network adapters: $_" -ForegroundColor Red
    }
    Read-Host "Press Enter to return to the main menu..."
}

# Function to change the time zone
function Change-TimeZone {
    try {
        $timezone = 'India Standard Time'
        tzutil /s $timezone
        Write-Host "Time zone changed to $timezone." -ForegroundColor Green
    } catch {
        Write-Host "Error changing time zone: $_" -ForegroundColor Red
    }
    Read-Host "Press Enter to return to the main menu..."
}

# Function to change the Administrator password
function Change-AdministratorPassword {
    try {
        # Prompt for the new password as a secure string
        $newPassword = Read-Host "Enter the new password for Administrator" -AsSecureString

        # Create a new local user object with the Administrator username
        $username = "Administrator"

        # Get the local user account
        $user = Get-LocalUser -Name $username

        if ($user) {
            # Change the Administrator password
            $user | Set-LocalUser -Password $newPassword
            Write-Host "Administrator password changed successfully." -ForegroundColor Green
        } else {
            Write-Host "Administrator account not found." -ForegroundColor Red
        }
    } catch {
        Write-Host "Error changing Administrator password: $_" -ForegroundColor Red
    }
    Read-Host "Press Enter to return to the main menu..."
}

# Main script loop
do {
    Write-Host "Select an option to execute:"
    Write-Host "  1: Turn off the Firewall"
    Write-Host "  2: Enable Remote Desktop"
    Write-Host "  3: Update Windows"
    Write-Host "  4: Change Computer Name"
    Write-Host "  5: Manage Network Adapters"
    Write-Host "  6: Change Time Zone to (UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi"
    Write-Host "  7: Change Administrator Password"
    Write-Host "  8: All of the Above"
    Write-Host "  9: Exit"
    $choice = Read-Host "Enter your choice (1, 2, 3, 4, 5, 6, 7, 8, or 9)"

    switch ($choice) {
        1 { Turn-OffFirewall }
        2 { Enable-RemoteDesktop }
        3 { Update-Windows }
        4 { Change-ComputerName }
        5 { Manage-NetworkAdapters }
        6 { Change-TimeZone }
        7 { Change-AdministratorPassword }
        8 {
            Turn-OffFirewall
            Enable-RemoteDesktop
            Update-Windows
            Change-ComputerName
            Manage-NetworkAdapters
            Change-TimeZone
            Change-AdministratorPassword
        }
        9 { Write-Host "Exiting..." -ForegroundColor Cyan; break }
        default { Write-Host "Invalid choice. Please enter a number between 1 and 9." -ForegroundColor Red }
    }
} while ($choice -ne 9)
